variables:
  DESTINATION_VERSION: "2.3.0"
  DESTINATION_IMAGE_TAG: ${CI_REGISTRY_IMAGE}:${DESTINATION_VERSION}
  REMOTE_DESTINATION_IMAGE_TAG: ${HARBOR_HOST}/applications/${CI_PROJECT_NAME}:${DESTINATION_VERSION}
  QA_URL: "http://dvwa.ptdemo.local"
  PTAI_IMAGE_TAG: ${CI_REGISTRY}/tools/aisa:${PTAI_VERSION}
  PTCS_CLI_IMAGE_TAG: ${CI_REGISTRY}/tools/ptcs-cli:0.0.10

stages:
  - sast
  - package
  - deploy

sast:
  stage: sast
  image: 
    name: ${PTAI_IMAGE_TAG}
    entrypoint: [""]
  before_script:
    - mkdir .ptai 
  script:
    - aisa --version
    - aisa --set-settings -u ${PTAI_URL} -t ${PTAI_TOKEN}
    - aisa --project-name ${CI_PROJECT_NAME} --scan-target . --report HTML Gitlab Sarif --reports-folder .ptai
  after_script:
    - mv .ptai/Report_${CI_PROJECT_NAME}_Gitlab_*.json .ptai/gitlab.json
    - mv .ptai/Report_${CI_PROJECT_NAME}_Sarif_*.sarif .ptai/sarif.json
    - mv .ptai/Report_${CI_PROJECT_NAME}_PlainReport_*.html .ptai/sast.html
  artifacts:
    when: always
    name: ptai-sast-results
    paths:
      - .ptai/sarif.json
      - .ptai/sast.html
    reports:
      sast: .ptai/gitlab.json

scan-dockerfile:
  stage: sast
  image: 
    name: ${PTCS_CLI_IMAGE_TAG}
    entrypoint: [""]
  before_script:
    - mkdir .ptcs
  script:
    - set +e
    - ptcs-cli scan dockerfile --login ${PTCS_USER} --password ${PTCS_PASSWORD} --ptcsurl=${PTCS_URL}
      --report-output=.ptcs/report.ptcs.dockerfile.html
      --report-format=html
      --enforced-rules a16bdcf2-e00d-486d-a705-42676a7a3620
      ./Dockerfile
    - set -e
  artifacts:
    when: always
    name: ptcs-ast-results
    paths:
      - .ptcs/report.ptcs.dockerfile.html

scan-manifests:
  stage: sast
  image: 
    name: ${PTCS_CLI_IMAGE_TAG}
    entrypoint: [""]
  before_script:
    - mkdir .ptcs
  script:
    - set +e
    - export SINGLE_MANIFEST_FILE=$(mktemp -d)/${CI_PROJECT_NAME}.yaml && touch ${SINGLE_MANIFEST_FILE}
    - find ./k8s -type f -name '*.yaml' -exec sh -c 'cat $1 >> ${SINGLE_MANIFEST_FILE} && echo -e "\n---\n" >> ${SINGLE_MANIFEST_FILE}' -- {} \;
    - ptcs-cli scan kubernetes --login ${PTCS_USER} --password ${PTCS_PASSWORD} --ptcsurl=${PTCS_URL}
      --report-output=.ptcs/report.ptcs.manifest.html
      --report-format=html
      --enforced-rules a16bdcf2-e00d-486d-a705-42676a7a3620
      ${SINGLE_MANIFEST_FILE}
    - set -e
  artifacts:
    when: always
    name: ptcs-ast-results
    paths:
      - .ptcs/report.ptcs.manifest.html

build-image:
  stage: package
  image: 
    name: ${BUILDAH_IMAGE}
    entrypoint: [""]
  before_script:
    - buildah login --username ${CI_REGISTRY_USER} --password ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - buildah login --username ${HARBOR_USER} --password ${HARBOR_PASSWORD} ${HARBOR_HOST}
    - buildah login --username ${CI_DEPENDENCY_PROXY_USER} --password ${CI_DEPENDENCY_PROXY_PASSWORD} ${CI_DEPENDENCY_PROXY_SERVER}
  script:
    - buildah build 
      --file ${CI_PROJECT_DIR}/Dockerfile 
      --tag ${DESTINATION_IMAGE_TAG}
      --build-arg "SOURCE_TOOL_IMAGE=${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/php:8-apache"
    - buildah push ${DESTINATION_IMAGE_TAG}
    - buildah tag ${DESTINATION_IMAGE_TAG} ${REMOTE_DESTINATION_IMAGE_TAG}
    - buildah push ${REMOTE_DESTINATION_IMAGE_TAG}

scan-remote-image:
  stage: package
  image: 
    name: ${PTCS_CLI_IMAGE_TAG}
    entrypoint: [""]
  needs:
    - build-image
  before_script:
    - mkdir .ptcs
  script:
    - set +e
    - ptcs-cli scan image --login ${PTCS_USER} --password ${PTCS_PASSWORD} --ptcsurl=${PTCS_URL}
      --report-output=.ptcs/report.ptcs.image.json
      --report-format=cyclonedx-json
      --remote 
      ${REMOTE_DESTINATION_IMAGE_TAG}
    - set -e
  artifacts:
    when: always
    name: ptcs-ast-results
    paths:
      - .ptcs/report.ptcs.image.json

deploy-to-qa:
  stage: deploy
  image: 
    name: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/dtzar/helm-kubectl:3.15
    entrypoint: [""]
  before_script:
    - mkdir -p ${HOME}/.kube/ && touch ${HOME}/.kube/config
    - echo -n ${KUBECONFIG_BASE64} | base64 -d > ${HOME}/.kube/config
  script:
    - kubectl apply --namespace ptdemo-qa --filename ./k8s/ --filename ./k8s/mariadb/ --wait
    - kubectl rollout status --namespace ptdemo-qa deployment/dvwa-db --timeout=600s
    - kubectl rollout status --namespace ptdemo-qa deployment/dvwa-web --timeout=600s

init-qa-database:
  stage: deploy
  image: 
    name: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/alpine/curl:8.9.0
    entrypoint: [""]
  needs:
    - deploy-to-qa
  script:
    - CURL="curl -s -o /dev/null  -w '%{http_code}\n' ${QA_URL}"
    - until [ `eval ${CURL}` -eq 200 ]; do sleep 1; done
    - TOKEN=$(curl ${QA_URL}/setup.php | awk -F 'value=' '/user_token/ {print $2}' | cut -d "'" -f2)
    - STATUS=`curl -X POST -Ls -o /dev/null -w '%{http_code}\n' -d "create_db=Create+%2F+Reset+Database&user_token=${TOKEN}" ${QA_URL}/setup.php`
